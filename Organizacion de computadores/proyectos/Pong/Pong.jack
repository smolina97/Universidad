
class Pong {

  
    static Pong instance;
    field Bat bat;
    field Ball ball;
    field int wall;
    field boolean exit;
    field int lastWall;
    field int batWidth;

    constructor Pong new() {
		do Screen.clearScreen();
		let batWidth = 50;
		let bat = Bat.new(230, 229, batWidth, 7);
		let ball = Ball.new(253, 222, 0, 511, 0, 229);
		do ball.setDestination(400,0);
		do Screen.drawRectangle(0, 238, 511, 240);
		do Output.moveCursor(22,0);
		let exit = false;
		let wall = 0;
		let lastWall = 0;
		return this;
    }

    method void dispose() {
        do bat.dispose();
		do ball.dispose();
        do Memory.deAlloc(this);
        return;
    }


    function void newInstance() {
        let instance = Pong.new();
        return;
    }
    

    function Pong getInstance() {
        return instance;
    }

   
    method void run() {
        var char key;

        while (~exit) {
 
            while ((key = 0) & (~exit)) {
                let key = Keyboard.keyPressed();
                do bat.move();
				do moveBall();
            }
                                                    	// A=LEFT  D=RIGTH SPACE=EXIT
            if (key = 65) {
	       	 	do bat.setDirection(1);
            }else {
	        	if (key = 68) {
 	            	do bat.setDirection(2);
                }else {
	            	if (key = 32) {
                    	let exit = true;
		    		}
				}
        	}

            while ((~(key = 0)) & (~exit)) {
                let key = Keyboard.keyPressed();
                do bat.move();
                do moveBall();
            }
        }

		if (exit) {
	    	do Output.printString("Game Over");
		}
    	return;
    }

   
    method void moveBall() {
		var int bouncingDirection, batLeft, batRight, ballLeft, ballRight;
		let wall = ball.move();

		if ((wall > 0) & (~(wall = lastWall))) {
			let lastWall = wall;
			let bouncingDirection = 0;
			let batLeft = bat.getLeft();
			let batRight = bat.getRight();
			let ballLeft = ball.getLeft();
			let ballRight = ball.getRight();
		
			if (wall = 4) {
				let exit = (batLeft > ballRight) | (batRight < ballLeft);
					if (~exit) {
						if (ballRight < (batLeft + 10)) {
							let bouncingDirection = -1;
						}else {
						if (ballLeft > (batRight - 10)) {
							let bouncingDirection = 1;
						}
					}
						let batWidth = batWidth - 2;
						do bat.setWidth(batWidth);			
						do Output.moveCursor(22,7);
					}
			}
			do ball.bounce(bouncingDirection);
		}
		return;
    }
}
